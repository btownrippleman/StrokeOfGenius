-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs
local scale = 50

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{

		["heart"] = {




                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -280.5, 1300.5  ,  -500.5, 1152.5  ,  -728, 972  ,  -969.5, 741.5  ,  546.5, 1117.5  ,  363.5, 1246.5  ,  205.5, 1344.5  ,  0.5, 1455.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -969.5, 741.5  ,  -1158, 522  ,  -1300, 320  ,  -1444, 55  ,  -1528, -170  ,  929.5, 780.5  ,  715, 982  ,  546.5, 1117.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   1053, -1403  ,  1328.5, -1217.5  ,  1387, -1148  ,  1462, -1031  ,  1, -1101  ,  709.5, -1455.5  ,  793.5, -1456.5  ,  946.5, -1436.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   585.5, -1438.5  ,  709.5, -1455.5  ,  1, -1101  ,  105.5, -1196.5  ,  215.5, -1278.5  ,  324.5, -1343.5  ,  449.5, -1399.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   1328.5, -1217.5  ,  1053, -1403  ,  1138.5, -1363.5  ,  1226.5, -1307.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -1108.5, -1379.5  ,  -1017.5, -1416.5  ,  -923.5, -1441.5  ,  -796.5, -1456.5  ,  -1445, -1063  ,  -1336.5, -1210.5  ,  -1275.5, -1269.5  ,  -1193.5, -1331.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   1574, -688  ,  1583, -566  ,  1545, -238  ,  1498, -82  ,  1443, 54  ,  1339, 254  ,  1499, -956  ,  1542, -838  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   1545, -238  ,  1583, -566  ,  1576, -412  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -600.5, -1441.5  ,  -511.5, -1419.5  ,  1, -1101  ,  1133, 552  ,  1023, 682  ,  929.5, 780.5  ,  -795.5, -1456.5  ,  -694.5, -1454.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -796.5, -1456.5  ,  929.5, 780.5  ,  -1584, -577  ,  -1578, -666  ,  -1559, -779  ,  -1531, -877  ,  -1488, -983  ,  -1445, -1063  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -303.5, -1331.5  ,  -190.5, -1260.5  ,  1, -1101  ,  -511.5, -1419.5  ,  -403.5, -1380.5  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -1584, -577  ,  929.5, 780.5  ,  -1528, -170  ,  -1560, -299  ,  -1579, -428  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   1252, 391  ,  1133, 552  ,  1, -1101  ,  1462, -1031  ,  1499, -956  ,  1339, 254  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -796.5, -1456.5  ,  -795.5, -1456.5  ,  929.5, 780.5  }
                    }



		}

	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end

	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end

	return physics;
end

return M
